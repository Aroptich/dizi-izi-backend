# Generated by Django 4.1.7 on 2023-05-05 20:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import furniture.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Furniture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Наименование мебели')),
                ('name_english', models.CharField(max_length=128, unique=True, verbose_name='Наименование мебели на английском языке')),
                ('length', models.PositiveIntegerField(help_text='Длина в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Длина мебели')),
                ('width', models.PositiveIntegerField(help_text='Ширина в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Ширина мебели')),
                ('length_access', models.PositiveIntegerField(help_text='Длина c зоной подхода в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Длина мебели c зоной подхода')),
                ('width_access', models.PositiveIntegerField(help_text='Ширина c зоной подхода в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Ширина мебели c зоной подхода')),
                ('image', models.ImageField(upload_to='furniture/', verbose_name='Изображение мебели')),
            ],
            options={
                'verbose_name': 'Мебель',
                'verbose_name_plural': 'Мебель',
            },
        ),
        migrations.CreateModel(
            name='Placement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nw_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата north_west')),
                ('ne_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата north-east')),
                ('sw_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата south-west')),
                ('se_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата south-east')),
                ('furniture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='furniture.furniture', verbose_name='Мебель')),
            ],
            options={
                'verbose_name': 'Связь размещения мебели для пользователя',
                'verbose_name_plural': 'Связи размещения мебели для пользователя',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название комнаты')),
                ('first_wall', models.PositiveIntegerField(help_text='Длина стены в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Длина 1 стены')),
                ('second_wall', models.PositiveIntegerField(help_text='Длина стены в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Длина 2 стены')),
                ('third_wall', models.PositiveIntegerField(help_text='Длина стены в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Длина 3 стены')),
                ('fourth_wall', models.PositiveIntegerField(help_text='Длина стены в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Длина 4 стены')),
                ('furniture_placement', models.ManyToManyField(through='furniture.Placement', to='furniture.furniture')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Комната',
                'verbose_name_plural': 'Комнаты',
            },
        ),
        migrations.CreateModel(
            name='Window',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nw_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата north_west')),
                ('ne_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата north-east')),
                ('sw_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата south-west')),
                ('se_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата south-east')),
                ('length', models.PositiveIntegerField(help_text='Длина в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Длина окна')),
                ('width', models.PositiveIntegerField(help_text='Ширина в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Ширина окна')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='furniture.room', verbose_name='Комната')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PowerSocket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nw_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата north_west')),
                ('ne_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата north-east')),
                ('sw_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата south-west')),
                ('se_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата south-east')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='furniture.room', verbose_name='Комната')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='placement',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='furniture.room', verbose_name='Комната'),
        ),
        migrations.CreateModel(
            name='Door',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nw_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата north_west')),
                ('ne_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата north-east')),
                ('sw_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата south-west')),
                ('se_coordinate', models.PositiveIntegerField(default=0, verbose_name='Координата south-east')),
                ('width', models.PositiveIntegerField(help_text='Ширина в мм', validators=[furniture.models.minimum_len_width_validator], verbose_name='Ширина двери')),
                ('open_inside', models.BooleanField(help_text='Открытие в комнату - 1, из комнаты - 0', verbose_name='Направление открытия двери')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='furniture.room', verbose_name='Комната')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
